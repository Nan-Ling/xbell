"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[957],{2032:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(1318);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),c=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(n),d=r,h=m["".concat(i,".").concat(d)]||m[d]||u[d]||l;return n?a.createElement(h,o(o({ref:t},p),{},{components:n})):a.createElement(h,o({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var c=2;c<l;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5795:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>c});var a=n(4219),r=(n(1318),n(2032));const l={title:"Decorators"},o=void 0,s={unversionedId:"api/decorators",id:"api/decorators",title:"Decorators",description:"Decorators are used in classic mode.",source:"@site/docs/api/decorators.mdx",sourceDirName:"api",slug:"/api/decorators",permalink:"/xbell/docs/api/decorators",draft:!1,editUrl:"https://github.com/x-bell/xbell/tree/main/website/docs/api/decorators.mdx",tags:[],version:"current",frontMatter:{title:"Decorators"},sidebar:"api",previous:{title:"Keyboard",permalink:"/xbell/docs/api/keyboard"}},i={},c=[{value:"@Test",id:"test",level:2},{value:"@DisplayName",id:"displayname",level:2},{value:"@Each",id:"each",level:2},{value:"@Batch",id:"batch",level:2},{value:"@BeforeEach",id:"beforeeach",level:2},{value:"@AfterEach",id:"aftereach",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Decorators are used in classic mode."),(0,r.kt)("h2",{id:"test"},"@Test"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"@Test")," Denotes that a method is a test method."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Signature: @Test()")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Test, expect } from 'xbell';\n\nclass TestCases {\n  @Test()\n  it_should_to_be_2() {\n    expect(1 + 1).toBe(2);\n  }\n}\n")),(0,r.kt)("h2",{id:"displayname"},"@DisplayName"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Signature: @DisplayName(text)")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"text")," ",(0,r.kt)("type",null,"string")," text of display name")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"@DisplayName")," Set the name of the test case."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Test, DisplayName, expect } from 'xbell';\n\nclass TestCases {\n  @Test()\n  @DisplayName('it should to be two')\n  it_should_to_be_2() {\n    expect(1 + 1).toBe(2);\n  }\n}\n")),(0,r.kt)("h2",{id:"each"},"@Each"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Signature: @Each(items, displayNameFunction)")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"items")," ",(0,r.kt)("type",null,"T[]")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"displayNameFunction")," ",(0,r.kt)("type",null,"(item: T, index: number) => string"))),(0,r.kt)("p",null,"Generate multiple test cases."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Test, Batch, TestEachArguments } from 'xbell';\n\nclass TestCases {\n\n  @Test()\n  @Batch([1, 2, 3], (item, index) => `case data is ${item}, index is ${index}`)\n  testCase({ item, index, expect }: TestEachArguments<number>) {\n    expect(item).toBe(index + 1);\n  }\n\n}\n")),(0,r.kt)("h2",{id:"batch"},"@Batch"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Signature: @Batch(items)")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"items")," ",(0,r.kt)("type",null,"T[]"))),(0,r.kt)("p",null,"Unlike ",(0,r.kt)("inlineCode",{parentName:"p"},"@Each")," ,  ",(0,r.kt)("inlineCode",{parentName:"p"},"@Batch")," only generates one test case, so if one item fails, this test case will fail."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Test, TestBatchArguments } from 'xbell';\n\nclass TestCases {\n  @Test()\n  @DisplayName('item is equal to the index plus one')\n  @Batch([1, 2, 3])\n  testCase({ item, index, expect }: TestBatchArguments<number>) {\n    expect(item).toBe(index + 1);\n  }\n}\n\n")),(0,r.kt)("h2",{id:"beforeeach"},"@BeforeEach"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Signature: @BeforeEach()")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"@BeforeEach")," Denotes that the annotated method should be executed before each ",(0,r.kt)("inlineCode",{parentName:"p"},"@Test")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Exmaple")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Test, BeforeEach, TestArguments } from 'xbell';\n\nclass TestCases {\n  accountLocator!: number;\n\n  @BeforeEach()\n  async init({ page }: TestArguments) {\n    await page.goto('http://github.com');\n    this.accountLocator = page.getByText('account');\n  }\n\n  @Test()\n  case1() {\n    await this.accountLocator.click();\n  }\n\n  @Test()\n  case2() {\n    await this.accountLocator.hover();\n  }\n}\n\n")),(0,r.kt)("h2",{id:"aftereach"},"@AfterEach"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Signature: @AfterEach()")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"@AfterEach")," Denotes that the annotated method should be executed after each ",(0,r.kt)("inlineCode",{parentName:"p"},"@Test"),",\n",(0,r.kt)("strong",{parentName:"p"},"Exmaple")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Test, BeforeEach, AfterEach, TestArguments } from 'xbell';\n\nclass TestCases {\n  accountLocator!: number;\n\n  @BeforeEach()\n  async init({ page }: TestArguments) {\n    await page.goto('http://github.com');\n    this.accountLocator = page.getByText('account');\n  }\n\n  @AfterEach()\n  async makeAssertion({ page, expect }: TestArguments) {\n    await expect(page).toMatchScreenshot('default-screenshot');\n  }\n\n  @Test()\n  case1() {\n    await this.accountLocator.click();\n  }\n\n  @Test()\n  case2() {\n    await this.accountLocator.hover();\n  }\n}\n\n")))}u.isMDXComponent=!0}}]);