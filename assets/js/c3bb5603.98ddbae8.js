"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8717],{2032:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>m});var n=r(1318);function l(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){l(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,l=function(e,t){if(null==e)return{};var r,n,l={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(l[r]=e[r]);return l}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(l[r]=e[r])}return l}var p=n.createContext({}),s=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},c=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,l=e.mdxType,o=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=s(r),m=l,g=d["".concat(p,".").concat(m)]||d[m]||u[m]||o;return r?n.createElement(g,a(a({ref:t},c),{},{components:r})):n.createElement(g,a({ref:t},c))}));function m(e,t){var r=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var o=r.length,a=new Array(o);a[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:l,a[1]=i;for(var s=2;s<o;s++)a[s]=r[s];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},7059:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var n=r(4219),l=(r(1318),r(2032));const o={title:"Config"},a=void 0,i={unversionedId:"api/config",id:"api/config",title:"Config",description:'XBell provides some configuration options to help you test better. You can write configuration options through the xbell.config.ts file in the root directory, and "xbell" will read it when it starts.',source:"@site/docs/api/config.mdx",sourceDirName:"api",slug:"/api/config",permalink:"/xbell/docs/api/config",draft:!1,editUrl:"https://github.com/x-bell/xbell/tree/main/website/docs/api/config.mdx",tags:[],version:"current",frontMatter:{title:"Config"},sidebar:"api",previous:{title:"Test",permalink:"/xbell/docs/api/test"},next:{title:"Expect",permalink:"/xbell/docs/api/expect"}},p={},s=[{value:"setup",id:"setup",level:2},{value:"teardown",id:"teardown",level:2},{value:"maxThreads",id:"maxthreads",level:2},{value:"include",id:"include",level:2},{value:"exclude",id:"exclude",level:2},{value:"browser",id:"browser",level:2},{value:"browser.headless",id:"browserheadless",level:3},{value:"browser.devtools",id:"browserdevtools",level:3},{value:"browser.viewport",id:"browserviewport",level:3},{value:"browser.storageState",id:"browserstoragestate",level:3},{value:"coverage",id:"coverage",level:2},{value:"coverage.enable",id:"coverageenable",level:3},{value:"coverage.include",id:"coverageinclude",level:3},{value:"coverage.exclude",id:"coverageexclude",level:3},{value:"projects",id:"projects",level:2},{value:"project.name",id:"projectname",level:3},{value:"project.data",id:"projectdata",level:3},{value:"project.config",id:"projectconfig",level:3}],c={toc:s};function u(e){let{components:t,...r}=e;return(0,l.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"XBell provides some configuration options to help you test better. You can write configuration options through the ",(0,l.kt)("inlineCode",{parentName:"p"},"xbell.config.ts"),' file in the root directory, and "xbell" will read it when it starts.'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="xbell.config.ts"',title:'"xbell.config.ts"'},"import type { XBellConfig } from 'xbell';\n\nconst config: XBellConfig = {\n  browser: {\n    headless: false,\n  },\n  include: ['**/*.{test,spec}.{js,ts,jsx,tsx}'],\n};\n\nexport default config;\n")),(0,l.kt)("h2",{id:"setup"},"setup"),(0,l.kt)("h2",{id:"teardown"},"teardown"),(0,l.kt)("h2",{id:"maxthreads"},"maxThreads"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Type"),": ",(0,l.kt)("type",null,"number")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Default"),": Number of CPU")),(0,l.kt)("h2",{id:"include"},"include"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Type"),": ",(0,l.kt)("type",null,"string[]")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Default"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"['**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}']"))),(0,l.kt)("h2",{id:"exclude"},"exclude"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Type"),": ",(0,l.kt)("type",null,"string[]")),(0,l.kt)("li",{parentName:"ul"},"default ",(0,l.kt)("inlineCode",{parentName:"li"},"['**/node_modules/**', '**/dist/**']"))),(0,l.kt)("h2",{id:"browser"},"browser"),(0,l.kt)("p",null,"Browser Configuration"),(0,l.kt)("h3",{id:"browserheadless"},"browser.headless"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Type"),": ",(0,l.kt)("type",null,"boolean")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Default"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"true"))),(0,l.kt)("p",null,"Whether to use headless mode"),(0,l.kt)("h3",{id:"browserdevtools"},"browser.devtools"),(0,l.kt)("h3",{id:"browserviewport"},"browser.viewport"),(0,l.kt)("h3",{id:"browserstoragestate"},"browser.storageState"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Type"),": ",(0,l.kt)("type",null,"{ width: number; height: number; }")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Default"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"{ width: 1280, height: 700 }"))),(0,l.kt)("h2",{id:"coverage"},"coverage"),(0,l.kt)("h3",{id:"coverageenable"},"coverage.enable"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Type"),": ",(0,l.kt)("type",null,"boolean")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Default"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"false"))),(0,l.kt)("p",null,"Whether to enable coverage"),(0,l.kt)("h3",{id:"coverageinclude"},"coverage.include"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Type"),": ",(0,l.kt)("type",null,"string[]"))),(0,l.kt)("h3",{id:"coverageexclude"},"coverage.exclude"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Type"),": ",(0,l.kt)("type",null,"string[]")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Default"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"[\n    '**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}',\n    '**/node_modules/**',\n    '**/dist/**',\n    '**/cypress/**',\n    '**/.{idea,git,cache,output,temp}/**',\n    '**/{xbell,playwright,karma,rollup,webpack,vite,vitest,jest,ava,babel,nyc,cypress}.config.*'\n]"))),(0,l.kt)("h2",{id:"projects"},"projects"),(0,l.kt)("p",null,"XBell supports running multiple test projects. You can use ",(0,l.kt)("inlineCode",{parentName:"p"},"projects")," for different testing purposes. "),(0,l.kt)("p",null,"For example, different ",(0,l.kt)("inlineCode",{parentName:"p"},"projects")," correspond to different data environments, or different ",(0,l.kt)("inlineCode",{parentName:"p"},"projects")," correspond to different browser viewport, or even different ",(0,l.kt)("inlineCode",{parentName:"p"},"projects")," correspond to different test directories."),(0,l.kt)("h3",{id:"projectname"},"project.name"),(0,l.kt)("p",null,"Project Name"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"title=xbell.config.ts",title:"xbell.config.ts"},"export default = {\n  projects: [\n    { name: 'project1' },\n  ],\n};\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"import { test } from 'xbell';\n\ntest.browser('project1', ({ project, expect }) => {\n  expect(project.name).toBe('project1');\n});\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ xbell --projects project1\n")),(0,l.kt)("h3",{id:"projectdata"},"project.data"),(0,l.kt)("h3",{id:"projectconfig"},"project.config"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Type"),": ",(0,l.kt)("type",null,"XBellConfig")),(0,l.kt)("p",null,"Each project is allowed to have an independent test configuration, inheriting the root configuration by default."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"export default {\n  projects: [\n    {\n      name: 'e2e-project',\n      config: {\n        include: ['**/*.e2e.ts']\n      }\n    }\n  ]\n}\n")))}u.isMDXComponent=!0}}]);