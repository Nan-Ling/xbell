"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9469],{2032:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var a=n(1318);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=p(n),d=i,k=m["".concat(o,".").concat(d)]||m[d]||c[d]||l;return n?a.createElement(k,r(r({ref:t},u),{},{components:n})):a.createElement(k,r({ref:t},u))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,r=new Array(l);r[0]=m;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:i,r[1]=s;for(var p=2;p<l;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6993:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>c,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var a=n(4219),i=(n(1318),n(2032));const l={title:"Test"},r=void 0,s={unversionedId:"api/test",id:"api/test",title:"Test",description:"test",source:"@site/docs/api/test.mdx",sourceDirName:"api",slug:"/api/test",permalink:"/xbell/docs/api/test",draft:!1,editUrl:"https://github.com/x-bell/xbell/tree/main/website/docs/api/test.mdx",tags:[],version:"current",frontMatter:{title:"Test"},sidebar:"api",next:{title:"Config",permalink:"/xbell/docs/api/config"}},o={},p=[{value:"test",id:"test",level:2},{value:"test.extend",id:"testextend",level:3},{value:"test.each",id:"testeach",level:3},{value:"test.batch",id:"testbatch",level:3},{value:"test.todo",id:"testtodo",level:3},{value:"test.only",id:"testonly",level:3},{value:"test.skip",id:"testskip",level:3},{value:"test.browser",id:"testbrowser",level:2},{value:"test.browser.extend",id:"testbrowserextend",level:3},{value:"test.browser.each",id:"testbrowsereach",level:3},{value:"test.browser.batch",id:"testbrowserbatch",level:3},{value:"test.browser.todo",id:"testbrowsertodo",level:3},{value:"test.browser.only",id:"testbrowseronly",level:3},{value:"test.browser.skip",id:"testbrowserskip",level:3},{value:"describe",id:"describe",level:2},{value:"describe.skip",id:"describeskip",level:3},{value:"describe.only",id:"describeonly",level:3},{value:"describe.todo",id:"describetodo",level:3}],u={toc:p};function c(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"test"},"test"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"test")," is the most basic tool method in ",(0,i.kt)("strong",{parentName:"p"},"XBell")," for declaring and writing test case."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Signature: test(displayName, testFunction)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"displayName")," ",(0,i.kt)("type",null,"string")," case name"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"testFunction")," ",(0,i.kt)("type",null,"(args: TestArguments) => void | Promise","<","void",">"," ")," test function")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { test } from 'xbell';\n\ntest('goto github', async ({ page }) => {\n  await page.goto('https://github.com');\n});\n")),(0,i.kt)("h3",{id:"testextend"},"test.extend"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Signature: test.extend(extendFunction)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"extendFunction")," ",(0,i.kt)("type",null,"(testArgs: TestArguments) => any"))),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"test.extend")," can extend or customize the environment of the case, which will be executed before each case begins."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { test as baisc } from 'xbell';\n\nconst test = basic.extend(({ expect }) => {\n  const data = [ 1, 2, 3, ];\n  return {\n    expect,\n    data,\n  };\n});\n\ntest('extend demo', ({ expect, data }) => {\n  expect(data[0]).toBe(1);\n});\n\n")),(0,i.kt)("h3",{id:"testeach"},"test.each"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Signature: test.each(items)(displayName, testFunction)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"items")," ",(0,i.kt)("type",null,"T[]")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"displayName")," ",(0,i.kt)("type",null,"(item: T) => string")," case name"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"testFunction")," ",(0,i.kt)("type",null,"(args: TestArguments & { item: T }) => void | Promise","<","void",">"," ")," test function")),(0,i.kt)("p",null,"Generate multiple test cases."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { test } from 'xbell';\n\ntest.each([1, 2, 3])(\n  (item, index) => `case data is ${item}, index is ${index}`,\n  ({ expect, item }) => {\n    expect(item).toBe(index + 1);\n  }\n);\n")),(0,i.kt)("h3",{id:"testbatch"},"test.batch"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Signature: test.batch(items)(displayName, testFunction)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"items")," ",(0,i.kt)("type",null,"T[]")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"displayName")," ",(0,i.kt)("type",null,"string")," case name"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"testFunction")," ",(0,i.kt)("type",null,"(args: TestArguments & { item: T }) => void | Promise","<","void",">"," ")," test function")),(0,i.kt)("p",null,"Unlike ",(0,i.kt)("inlineCode",{parentName:"p"},"test.each")," ,  ",(0,i.kt)("inlineCode",{parentName:"p"},"test.batch")," only generates one test case, so if one item fails, this test case will fail."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { test } from 'xbell';\n\ntest.batch([1, 2, 3])(\n  'item is equal to the index plus one',\n  ({ expect, item }) => {\n    expect(item).toBe(index + 1);\n  }\n);\n")),(0,i.kt)("h3",{id:"testtodo"},"test.todo"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Signature: test.todo(displayName, testFunction)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"displayName")," ",(0,i.kt)("type",null,"string")," case name"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"testFunction")," ",(0,i.kt)("type",null,"(args: TestArguments) => void | Promise","<","void",">"," ")," test function")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"test.todo('goto github', async (page) => {\n  await page.goto('https://github.com');\n});\n")),(0,i.kt)("h3",{id:"testonly"},"test.only"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Signature: test.only(displayName, testFunction)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"displayName")," ",(0,i.kt)("type",null,"string")," case name"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"testFunction")," ",(0,i.kt)("type",null,"(args: TestArguments) => void | Promise","<","void",">"," ")," test function")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"test.only('goto github', async (page) => {\n  await page.goto('https://github.com');\n});\n")),(0,i.kt)("h3",{id:"testskip"},"test.skip"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Signature: test.skip(displayName, testFunction)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"displayName")," ",(0,i.kt)("type",null,"string")," case name"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"testFunction")," ",(0,i.kt)("type",null,"(args: TestArguments) => void | Promise","<","void",">"," ")," test function")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"test.skip('goto github', async (page) => {\n  await page.goto('https://github.com');\n});\n")),(0,i.kt)("h2",{id:"testbrowser"},"test.browser"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Signature: test.browser(displayName, testFunction)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"displayName")," ",(0,i.kt)("type",null,"string")," case name"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"testFunction")," ",(0,i.kt)("type",null,"(args: TestArguments) => void | Promise","<","void",">"," ")," test function")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { test } from 'xbell';\n\ntest.browser('one plus one equals two', async ({ page, expect }) => {\n  const { add } = await import('./add.ts');\n  expect(add(1, 1)).toBe(2);\n});\n")),(0,i.kt)("h3",{id:"testbrowserextend"},"test.browser.extend"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Signature: test.browser.extend(extendFunction)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"extendFunction")," ",(0,i.kt)("type",null,"(testArgs: BrowserTestArguments) => any"))),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"test.browser.extend")," can extend or customize the environment of the browser case, which will be executed before each case begins."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { test as baisc } from 'xbell';\n\nconst test = basic.browser.extend(({ expect }) => {\n  const data = [ 1, 2, 3, ];\n\n  window.data = data;\n\n  return {\n    expect,\n    data,\n  };\n});\n\ntest('browser extend demo', ({ expect, data }) => {\n  expect(data).toBe(window.data);\n});\n\n")),(0,i.kt)("h3",{id:"testbrowsereach"},"test.browser.each"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Signature: test.browser.each(items)(displayName, testFunction)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"items")," ",(0,i.kt)("type",null,"T[]")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"displayName")," ",(0,i.kt)("type",null,"(item: T) => string")," case name"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"testFunction")," ",(0,i.kt)("type",null,"(args: TestArguments & { item: T }) => void | Promise","<","void",">"," ")," test function")),(0,i.kt)("p",null,"Generate multiple test cases."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { test } from 'xbell';\n\ntest.browser.each([1, 2, 3])(\n  (item, index) => `case data is ${item}, index is ${index}`,\n  ({ expect, item }) => {\n    expect(item).toBe(index + 1);\n  }\n);\n")),(0,i.kt)("h3",{id:"testbrowserbatch"},"test.browser.batch"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Signature: test.browser.batch(items)(displayName, testFunction)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"items")," ",(0,i.kt)("type",null,"T[]")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"displayName")," ",(0,i.kt)("type",null,"string")," case name"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"testFunction")," ",(0,i.kt)("type",null,"(args: TestArguments & { item: T }) => void | Promise","<","void",">"," ")," test function")),(0,i.kt)("p",null,"Unlike ",(0,i.kt)("inlineCode",{parentName:"p"},"test.each")," ,  ",(0,i.kt)("inlineCode",{parentName:"p"},"test.batch")," only generates one test case, so if one item fails, this test case will fail."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { test } from 'xbell';\n\ntest.browser.batch([1, 2, 3])(\n  'item is equal to the index plus one',\n  ({ expect, item }) => {\n    expect(item).toBe(index + 1);\n  }\n);\n")),(0,i.kt)("h3",{id:"testbrowsertodo"},"test.browser.todo"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Signature: test.browser.todo(displayName, testFunction)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"displayName")," ",(0,i.kt)("type",null,"string")," case name"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"testFunction")," ",(0,i.kt)("type",null,"(args: TestArguments) => void | Promise","<","void",">"," ")," test function")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"test.browser.todo('goto github', async (page) => {\n  await page.goto('https://github.com');\n});\n")),(0,i.kt)("h3",{id:"testbrowseronly"},"test.browser.only"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Signature: test.browser.only(displayName, testFunction)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"displayName")," ",(0,i.kt)("type",null,"string")," case name"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"testFunction")," ",(0,i.kt)("type",null,"(args: TestArguments) => void | Promise","<","void",">"," ")," test function")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"test.browser.only('goto github', async (page) => {\n  await page.goto('https://github.com');\n});\n")),(0,i.kt)("h3",{id:"testbrowserskip"},"test.browser.skip"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Signature: test.browser.skip(displayName, testFunction)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"displayName")," ",(0,i.kt)("type",null,"string")," case name"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"testFunction")," ",(0,i.kt)("type",null,"(args: TestArguments) => void | Promise","<","void",">"," ")," test function")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"test.browser.skip('goto github', async (page) => {\n  await page.goto('https://github.com');\n});\n")),(0,i.kt)("h2",{id:"describe"},"describe"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Signature: describe(description, testGroupFunction)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"description")," : ",(0,i.kt)("type",null,"string")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"testGroupFunction")," : ",(0,i.kt)("type",null,"() => void;"))),(0,i.kt)("h3",{id:"describeskip"},"describe.skip"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Signature: describe.skip(description, testGroupFunction)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"description")," : ",(0,i.kt)("type",null,"string")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"testGroupFunction")," : ",(0,i.kt)("type",null,"() => void;"))),(0,i.kt)("h3",{id:"describeonly"},"describe.only"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Signature: describe.only(description, testGroupFunction)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"description")," : ",(0,i.kt)("type",null,"string")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"testGroupFunction")," : ",(0,i.kt)("type",null,"() => void;"))),(0,i.kt)("h3",{id:"describetodo"},"describe.todo"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Signature: describe.todo(description, testGroupFunction)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"description")," : ",(0,i.kt)("type",null,"string")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"testGroupFunction")," : ",(0,i.kt)("type",null,"() => void;"))))}c.isMDXComponent=!0}}]);